apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    deployment.kubernetes.io/revision: "6"
    meta.helm.sh/release-name: seldon-core-analytics
    meta.helm.sh/release-namespace: seldon-system
  labels:
    app.kubernetes.io/instance: seldon-core-analytics
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: grafana
    app.kubernetes.io/version: 7.0.3
    helm.sh/chart: grafana-5.1.4
  managedFields:
  - apiVersion: apps/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:annotations:
          .: {}
          f:meta.helm.sh/release-name: {}
          f:meta.helm.sh/release-namespace: {}
        f:labels:
          .: {}
          f:app.kubernetes.io/instance: {}
          f:app.kubernetes.io/managed-by: {}
          f:app.kubernetes.io/name: {}
          f:app.kubernetes.io/version: {}
          f:helm.sh/chart: {}
      f:spec:
        f:progressDeadlineSeconds: {}
        f:replicas: {}
        f:revisionHistoryLimit: {}
        f:selector:
          f:matchLabels:
            .: {}
            f:app.kubernetes.io/instance: {}
            f:app.kubernetes.io/name: {}
        f:strategy:
          f:rollingUpdate:
            .: {}
            f:maxSurge: {}
            f:maxUnavailable: {}
          f:type: {}
        f:template:
          f:metadata:
            f:annotations:
              .: {}
              f:checksum/config: {}
              f:checksum/dashboards-json-config: {}
              f:checksum/sc-dashboard-provider-config: {}
              f:checksum/secret: {}
            f:labels:
              .: {}
              f:app.kubernetes.io/instance: {}
              f:app.kubernetes.io/name: {}
          f:spec:
            f:containers:
              k:{"name":"grafana"}:
                .: {}
                f:env:
                  .: {}
                  k:{"name":"GF_SECURITY_ADMIN_PASSWORD"}:
                    .: {}
                    f:name: {}
                    f:valueFrom:
                      .: {}
                      f:secretKeyRef:
                        .: {}
                        f:key: {}
                        f:name: {}
                  k:{"name":"GF_SECURITY_ADMIN_USER"}:
                    .: {}
                    f:name: {}
                    f:valueFrom:
                      .: {}
                      f:secretKeyRef:
                        .: {}
                        f:key: {}
                        f:name: {}
                f:image: {}
                f:imagePullPolicy: {}
                f:livenessProbe:
                  .: {}
                  f:failureThreshold: {}
                  f:httpGet:
                    .: {}
                    f:path: {}
                    f:port: {}
                    f:scheme: {}
                  f:initialDelaySeconds: {}
                  f:periodSeconds: {}
                  f:successThreshold: {}
                  f:timeoutSeconds: {}
                f:name: {}
                f:ports:
                  .: {}
                  k:{"containerPort":80,"protocol":"TCP"}:
                    .: {}
                    f:containerPort: {}
                    f:name: {}
                    f:protocol: {}
                  k:{"containerPort":1234,"protocol":"TCP"}:
                    .: {}
                    f:containerPort: {}
                    f:name: {}
                    f:protocol: {}
                f:readinessProbe:
                  .: {}
                  f:failureThreshold: {}
                  f:httpGet:
                    .: {}
                    f:path: {}
                    f:port: {}
                    f:scheme: {}
                  f:periodSeconds: {}
                  f:successThreshold: {}
                  f:timeoutSeconds: {}
                f:resources:
                  .: {}
                  f:limits:
                    .: {}
                    f:cpu: {}
                    f:memory: {}
                  f:requests:
                    .: {}
                    f:cpu: {}
                    f:memory: {}
                f:terminationMessagePath: {}
                f:terminationMessagePolicy: {}
                f:volumeMounts:
                  .: {}
                  k:{"mountPath":"/etc/grafana/grafana.ini"}:
                    .: {}
                    f:mountPath: {}
                    f:name: {}
                    f:subPath: {}
                  k:{"mountPath":"/etc/grafana/provisioning/dashboards/sc-dashboardproviders.yaml"}:
                    .: {}
                    f:mountPath: {}
                    f:name: {}
                    f:subPath: {}
                  k:{"mountPath":"/etc/grafana/provisioning/datasources/datasources.yaml"}:
                    .: {}
                    f:mountPath: {}
                    f:name: {}
                    f:subPath: {}
                  k:{"mountPath":"/tmp/dashboards"}:
                    .: {}
                    f:mountPath: {}
                    f:name: {}
                  k:{"mountPath":"/var/lib/grafana"}:
                    .: {}
                    f:mountPath: {}
                    f:name: {}
              k:{"name":"grafana-sc-dashboard"}:
                .: {}
                f:env:
                  .: {}
                  k:{"name":"FOLDER"}:
                    .: {}
                    f:name: {}
                    f:value: {}
                  k:{"name":"LABEL"}:
                    .: {}
                    f:name: {}
                    f:value: {}
                  k:{"name":"METHOD"}:
                    .: {}
                    f:name: {}
                  k:{"name":"RESOURCE"}:
                    .: {}
                    f:name: {}
                    f:value: {}
                f:image: {}
                f:imagePullPolicy: {}
                f:name: {}
                f:resources: {}
                f:terminationMessagePath: {}
                f:terminationMessagePolicy: {}
                f:volumeMounts:
                  .: {}
                  k:{"mountPath":"/tmp/dashboards"}:
                    .: {}
                    f:mountPath: {}
                    f:name: {}
            f:dnsPolicy: {}
            f:restartPolicy: {}
            f:schedulerName: {}
            f:securityContext:
              .: {}
              f:fsGroup: {}
              f:runAsGroup: {}
              f:runAsUser: {}
            f:serviceAccount: {}
            f:serviceAccountName: {}
            f:terminationGracePeriodSeconds: {}
            f:volumes:
              .: {}
              k:{"name":"config"}:
                .: {}
                f:configMap:
                  .: {}
                  f:defaultMode: {}
                  f:name: {}
                f:name: {}
              k:{"name":"sc-dashboard-provider"}:
                .: {}
                f:configMap:
                  .: {}
                  f:defaultMode: {}
                  f:name: {}
                f:name: {}
              k:{"name":"sc-dashboard-volume"}:
                .: {}
                f:emptyDir: {}
                f:name: {}
              k:{"name":"storage"}:
                .: {}
                f:emptyDir: {}
                f:name: {}
    manager: Go-http-client
    operation: Update
  - apiVersion: apps/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:spec:
        f:template:
          f:spec:
            f:containers:
              k:{"name":"grafana"}:
                f:env:
                  k:{"name":"GF_SERVER_DOMAIN_SERVE_FROM_SUB_PATH"}:
                    .: {}
                    f:name: {}
                    f:value: {}
                  k:{"name":"GF_SERVER_ROOT_URL"}:
                    .: {}
                    f:name: {}
                    f:value: {}
    manager: kubectl-edit
    operation: Update
  - apiVersion: apps/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:spec:
        f:template:
          f:metadata:
            f:annotations:
              f:kubectl.kubernetes.io/restartedAt: {}
    manager: kubectl-rollout
    operation: Update
  - apiVersion: apps/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:annotations:
          f:deployment.kubernetes.io/revision: {}
      f:status:
        f:availableReplicas: {}
        f:conditions:
          .: {}
          k:{"type":"Available"}:
            .: {}
            f:lastTransitionTime: {}
            f:lastUpdateTime: {}
            f:message: {}
            f:reason: {}
            f:status: {}
            f:type: {}
          k:{"type":"Progressing"}:
            .: {}
            f:lastTransitionTime: {}
            f:lastUpdateTime: {}
            f:message: {}
            f:reason: {}
            f:status: {}
            f:type: {}
        f:observedGeneration: {}
        f:readyReplicas: {}
        f:replicas: {}
        f:updatedReplicas: {}
    manager: kube-controller-manager
    operation: Update
  name: seldon-core-analytics-grafana
  namespace: seldon-system
  resourceVersion: "841026"
  selfLink: /apis/apps/v1/namespaces/seldon-system/deployments/seldon-core-analytics-grafana
  uid: fe8864dc-2171-4a52-9ecc-071e1b6b807e
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app.kubernetes.io/instance: seldon-core-analytics
      app.kubernetes.io/name: grafana
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      annotations:
        checksum/config: a70c463dc1b195e338ae859d247523987e509a8adbcf1d7b254f58aefcc4d635
        checksum/dashboards-json-config: 01ba4719c80b6fe911b091a7c05124b64eeece964e09c058ef8f9805daca546b
        checksum/sc-dashboard-provider-config: 5994b9353a6f5879b70520b47f29de3469b4b9840682a465dc37e142f9dce446
        checksum/secret: d2f1d78ade2a669259f738e9295b42e71eb50df749cc782739ad45d21a2e1c42
        kubectl.kubernetes.io/restartedAt: "2021-05-20T18:36:56+05:30"
      creationTimestamp: null
      labels:
        app.kubernetes.io/instance: seldon-core-analytics
        app.kubernetes.io/name: grafana
    spec:
      containers:
      - args:
        - --ssl-insecure-skip-verify=true
        - --set-authorization-header=true
        - --show-debug-on-error=true
        - --skip-provider-button=true
        - --provider=keycloak
        - --client-id=myapp
        - --scope=group_scope
        - --client-secret=c8b01721-ebee-4d33-8072-861f53166a34
        - --login-url=https://torrent.katonic.ai/auth/realms/katonic/protocol/openid-connect/auth
        - --redeem-url=https://torrent.katonic.ai/auth/realms/katonic/protocol/openid-connect/token
        - --profile-url=https://torrent.katonic.ai/auth/realms/katonic/protocol/openid-connect/userinfo
        - --validate-url=https://torrent.katonic.ai/auth/realms/katonic/protocol/openid-connect/userinfo
        - --upstream=http://localhost:1234/
        - --cookie-secure=true
        - --cookie-expire=168h0m
        - --cookie-refresh=60m
        - --cookie-secret=L1BibFNSaTFDRGdYbkwxcDM0dW5Vdz09
        - --cookie-domain=torrent.katonic.ai
        - --http-address=0.0.0.0:4180
        - --redirect-url=https://torrent.katonic.ai/oauth2/callback
        # - --keycloak-group=allusers
        - --email-domain=*
        - --oidc-email-claim=sub
        image: katonic/oauth2-proxy:v1
        imagePullPolicy: IfNotPresent
        name: oauth2-con
        ports:
        - containerPort: 4180
              
      - env:
        - name: METHOD
        - name: LABEL
          value: seldon_dashboard
        - name: FOLDER
          value: /tmp/dashboards
        - name: RESOURCE
          value: both
        image: katonic/grafana-sidecar:0.1
        imagePullPolicy: IfNotPresent
        name: grafana-sc-dashboard
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /tmp/dashboards
          name: katonic-dashboard
      - env:
        - name: GF_SERVER_ROOT_URL
          value: '%(protocol)s://%(domain)s/grafana/'
        - name: GF_SERVER_DOMAIN_SERVE_FROM_SUB_PATH
          value: "false"
        - name: GF_SECURITY_ADMIN_USER
          valueFrom:
            secretKeyRef:
              key: admin-user
              name: seldon-core-analytics-grafana
        - name: GF_SECURITY_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              key: admin-password
              name: seldon-core-analytics-grafana
        image: katonic/grafana:v1
        imagePullPolicy: IfNotPresent
        livenessProbe:
          failureThreshold: 10
          httpGet:
            path: /api/health
            port: 1234
            scheme: HTTP
          initialDelaySeconds: 60
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 30
        name: grafana
        ports:
        - containerPort: 80
          name: service
          protocol: TCP
        - containerPort: 1234
          name: grafana
          protocol: TCP
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /api/health
            port: 1234
            scheme: HTTP
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        resources:
          limits:
            cpu: 200m
            memory: 220Mi
          requests:
            cpu: 50m
            memory: 110Mi
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /etc/grafana/grafana.ini
          name: config
          subPath: grafana.ini
        - mountPath: /var/lib/grafana
          name: storage
        - mountPath: /etc/grafana/provisioning/datasources/datasources.yaml
          name: config
          subPath: datasources.yaml
        - mountPath: /tmp/dashboards
          name: katonic-dashboard
        - mountPath: /etc/grafana/provisioning/dashboards/sc-dashboardproviders.yaml
          name: sc-dashboard-provider
          subPath: provider.yaml

      dnsPolicy: ClusterFirst
      imagePullSecrets:
        - name: docker-hub-secret
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext:
        fsGroup: 472
        runAsGroup: 472
        runAsUser: 472
      serviceAccount: seldon-core-analytics-grafana
      serviceAccountName: seldon-core-analytics-grafana
      terminationGracePeriodSeconds: 30
      volumes:
      - configMap:
          defaultMode: 420
          name: seldon-core-analytics-grafana
        name: config
      - emptyDir: {}
        name: storage
      - emptyDir: {}
        name: sc-dashboard-volume
      - configMap:
          defaultMode: 420
          name: katonic-dashboard
        name: katonic-dashboard
      - configMap:
          defaultMode: 420
          name: seldon-core-analytics-grafana-config-dashboards
        name: sc-dashboard-provider
